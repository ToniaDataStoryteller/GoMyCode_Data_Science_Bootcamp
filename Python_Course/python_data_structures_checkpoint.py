# -*- coding: utf-8 -*-
"""Python Data Structures_Checkpoint

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UTifNKVpPnTLqfXhR1UCgYLJ-jK7G0C-

__**Question 1:**__

Write a Python program that multiplies all the items in a list.

Sample list= [2, 3, 6]

Result = 36
"""

# Sample list
sample_list = [2, 3, 6]

# Multiplying by 1 keeps the value unchanged
result = 1

# Multiply all items in the list
for num in sample_list:
    result *= num

# Print the result
print("Result =", result)

"""__**Question 2:**__

Write a Python program to get a list, sorted in increasing order by the last element in each tuple, from a given list of non-empty tuples.

Sample List : [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]

Expected result : [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]

Hint: You can use the sort function.
"""

# Sample list of tuples
sample_list = [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]

# Sort the list based on the last element of each tuple:
# - key=lambda x: x[-1] means "use the last item (x[-1]) of each tuple (x) as the sorting key"
sample_list.sort(key=lambda x: x[-1])

# Print the sorted list
print("Sorted list:", sample_list)

"""__**Question 3:**__

Write a Python program that combines two dictionaries by adding values for common keys.

d1 = {'a': 100, 'b': 200, 'c':300}

d2 = {'a': 300, 'b': 200, 'd':400}

Expected result: {'a': 400, 'b': 400, 'd': 400, 'c': 300}
"""

d1 = {'a': 100, 'b': 200, 'c': 300}
d2 = {'a': 300, 'b': 200, 'd': 400}

# Combine dictionaries by summing values for common keys
result = {
    key: d1.get(key, 0) + d2.get(key, 0)  # Add values from both dicts (default to 0 if missing)
    for key in set(d1) | set(d2)          # Loop through all unique keys from both dictionaries
}

print(result)

"""__**Question 4:**__

With a given integral number n, write a program to generate a dictionary that contains (i, i*i) so that is an integral number between 1 and n (both included). Then the program should print the dictionary. Suppose the following input is supplied to the program: 8. Then, the output should be: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}
"""

# Ask the user to enter a number
n = int(input("Enter an integer: "))

# Create an empty dictionary to store the squares
squares_dict = {}

# Calculate squares for numbers from 1 to n
for i in range(1, n + 1):
    squares_dict[i] = i * i  # Save the square of the number

# Show the final dictionary
print(squares_dict)

"""__**Question 5:**__

Write a program to sort a tuple by its float element.

For example: list= [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]

Expected result: [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]
"""

# Original list of tuples
items = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]

# Sort the list by the float value (second element) in descending order
sorted_items = sorted(items, key=lambda x: float(x[1]), reverse=True)

# Print the result
print("Sorted list:", sorted_items)

"""__**Question 6:**__

Write a Python program to create a set.

Examples : {0, 1, 2, 3, 4}

Write a Python program to iteration over sets.

Write a Python program to add members in a set and to remove items from a given set.
"""

# Create a set
my_set = {0, 1, 2, 3, 4}
print("Initial set:", my_set)

# Iteration over the set
vegetables = {"cucumber", "lettuce", "potato", "onion", "pepper", "carrot"}

print("Vegetables:")
for vegetables in vegetables:
    print(vegetables)

# Add members to the set
vegetables = {"cucumber", "lettuce", "potato", "onion", "pepper", "carrot"}

# Add single item
vegetables.add("cabbage")
print("After adding cabbage:", vegetables)

# Add multiple items
vegetables.update(["garlic", "broccoli", "spinach", "kale", "eggplant"])
print("After adding multiple:", vegetables)

# Remove items
vegetables.remove("garlic")
print("After removing garlic:", vegetables)

vegetables.discard("potato")
print("After discarding potato:", vegetables)

# Remove and return an arbitrary element
popped = vegetables.pop()
print(f"Popped {popped}, remaining:", vegetables)

# Clear all elements
vegetables.clear()
print("After clearing:", vegetables)